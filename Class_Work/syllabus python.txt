C Python 3

Python is a object oriented programming language

Python >> can be used as Scripting, Procedural, Functional, and OOP

Complier > pyc > Interpreter > will convert to binary

.pyc > byte code temp. deletable file

- static data type not available
- dynamically type programming language

Numeric type of data type
	- integer
	- float
	- complex
	
Boolean

Sequence data type
	List 
	Array is not in Python > list is alternative, num.py library to use Array in Python
	Tuple
	Set
		> Frozen Set
	Dictionary
	
	List VS Tuple >> list is mutable and Tuple is immutable, hetrogeneous 

Mapping
	
String > 

Identifier > special symbols are not allowed in the variable name

Module is called as a python file :: using "import" keyword this file can be included this file 

import Marvellous
from Marvellous import display
from Marvellous import *

Type of Arguments:
	positional argument
	keyword argument
	default argument
	variable number of argument :: passing array to the container

Selection:
	if else
	if lif lif else

Loops:
	for
	range(7)
	range(3,7)
	range(2,15,3)
	range(10,3,-1)
	
	++ , -- are not available i = i + 1
	
	while(condition):	

>python Marvellous.py

Input >
	Before execution {comman line argument}
	At the time of execution {when the program is running}
	
def main():
    pass
	
Python supports Global variable and Local  variable

for command line argument use "-h" for "help"

** Sequence Data Types of Python:
	- List			:: []
	- Set			:: {}
	- Tuple			:: ()
	- Dictionary	:: {:}
	
Every data type in python is hetrogeneous >> 

==========================================================================================

Array (import numPy) VS List (python data type)

** Nameless function > Lambda function  >  temporary function
Regular Function (function with name) > reusable

Interview:: Regular (def) Function VS Lambda Function
	Convert regular function to lambda function, check the feasibility
Nested Lambda function
Python is inspired from multiple languages > ABC language supports Lambda
	
** Filter Map Reduce [FMR]		(filter, map, reduce are python methods)
	- is a Design Pattern concept in Python
	
	400 > Filter > 60 > Map (Trained) > 60 > Reduce > 1 ... "final result of Reduced as one value" >> "fried rice analogy"

Syntax: 
	Data = [................]
	FData = filter(filter_function_name, Data)		//filter_function_name should always return boolean
	MData = map(map_function_name, FData)			//map_function_name takes one parameter returns updated one
	RData = reduce(reduce_function_name, MData)		//reduce_function_name takes multiple inputs returns only one value

** SKLearn is a open source library created by google 

==========================================================================================

** Program :: static set of instructions is called as program
** Executable :: Binary instructions

** Tool chain :: language converter, this converts the program in binary language

** Process :: is running instance of a program, microprocessor will run the binary program, this is converted to binary by tool chain
we are all process having single (main) thread, each process have certain life span

** Thread :: light weight entity of a process is called as thread, is part of process, it is dependent on process, if you need input/output engagement then you can use multi-Threading

** Primary Storage (RAM) (temporary data) and Secondary Storage (Hard drive) (permanent data)

** Operating System performs following tasks:
- Process mgm :: life span
- File mgm
- Memory mgm
- CPU Scheduling
- Hardware Abstraction

** Run time environment
** Address space :: memory allocated on RAM for process to execute, unique PId (process identifier) & TId (thread identifier)
Thread do not need separate space, it consumes same space as its process

** Operating System loves to create multiple threads than multiple processes

** Multi :: Processing ; Threading ; Core-Programming (con-currency model) ;

** Thread life cycle: create >> runnable >> PVM will pick thread >> run >> waiting (option) >> Dead

** Monolithic architecture & Micro services architecture

** Dead lock :: 

** Multi core programming can be called as advanced level of multi-processing

==========================================================================================

** Exception Handling :: Runtime error in the program which will terminate the execution. To avoid termination / abort best practice is to handle such exceptions
try-except-(mutltiple except blocks, optional)-finally(optional) :: code in the try block is executed under the observation of PVM. 
	try:
	except:
	finally:

- Write only exception prone code in try block
- Resource de-allocation in finally block

===========================================================

** Local Global variables in python
* Static variable is not available in python

===========================================================

Function which calls itself is called as recursion function
because static variables are not available is python, use Global variable

# Recursion :: has limited stack frame, this stack is less than 1000
# Iteration :: for ; while ; 

# ** In python everything is object, function is also treated as object